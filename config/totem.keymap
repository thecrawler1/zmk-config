//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE        0
#define LMD         1
#define RMD         2
#define SYM         3
#define NUM         4
#define ARW         5
#define Media       6
#define Fun         7
#define Button      8
#define Game        9
#define Gameplus    10

&sk { quick-release; };

&sl { release-after-ms = <3000>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <27 28>;
            layers = <0 1 2 3 4 5 7 8 6>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <6 7>;
            layers = <2 3 1 3 7 8 0 4 5 6>;
        };

        combo_ctrl_backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <28 29>;
            layers = <2 3 1 3 7 8 0 4 5 6>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1 2 3 4 5 6 7 8>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <2 1 3 3 7 8 0 4 5 6>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 24 22>;
            layers = <2 1 3 3 7 8 0 4 5 6>;
        };

        combo_accent_layer {
            bindings = <&sl 7>;
            key-positions = <14 15>;
            layers = <0>;
        };
    };

    macros {
        a_acute: a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp A>;
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp E>;
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp I>;
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp O>;
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp U>;
        };

        sa_acute: shift_a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(A)>;
        };

        se_acute: shift_e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(E)>;
        };

        si_acute: shift_i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(I)>;
        };

        so_acute: shift_o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(O)>;
        };

        su_acute: shift_u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(U)>;
        };

        a_circumflex: a_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp A>;
        };

        e_circumflex: e_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp E>;
        };

        o_circumflex: o_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp O>;
        };

        sa_circumflex: shift_a_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(A)>;
        };

        se_circumflex: shift_e_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(E)>;
        };

        so_circumflex: shift_o_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(O)>;
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp A>;
        };

        sa_tilde: shift_a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp LS(A)>;
        };

        a_grave: a_crasis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp GRAVE &kp A>;
        };

        sa_grave: shift_a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp GRAVE &kp LS(A)>;
        };

        c_cedilla: c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp COMMA &kp C>;
        };

        sc_cedilla: shift_c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp COMMA &kp LS(C)>;
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp O>;
        };

        so_tilde: so_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp LS(O)>;
        };

        bitwarden: macro_bitwarden {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(L))>;
        };

        dark_reader: dark_reader {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(A))>;
        };

        translate: translate_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
        };

        listen: listen_selection {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
        };

        devtools: devtools {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F12>;
        };

        addrbar: addrbar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F6>;
        };

        last_tabs: last_tabs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(T))>;
        };

        tab_start: tab_start {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(HOME))>;
        };

        reader_mode: reader_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(R))>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp A>, <&kp LeftShift>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp ;>, <&kp LeftShift>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 32 33 34>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
       &kp Q  &kp W  &kp E         &kp R      &kp T    &kp Y  &kp U      &kp I           &kp O    &kp P
       &kp A  &kp S  &kp D         &kp F      &kp G    &kp H  &kp J      &kp K           &kp L    &kp SEMI
&mo 3  &kp Z  &kp X  &kp C         &kp V      &kp B    &kp N  &kp M      &kp COMMA       &kp DOT  &kp SLASH  &mo 5
                     &sk LEFT_GUI  &kp SPACE  &mo 1    &mo 2  &kp ENTER  &kp LEFT_SHIFT
            >;
        };

        numbers {
            bindings = <
        &kp F1   &kp F2   &kp F3    &kp F4     &kp F5       &kp F6     &kp F7        &kp F8     &kp F9   &kp F10
        &kp N1   &kp N2   &kp N3    &kp N4     &kp N5       &kp N6     &kp N7        &kp N8     &kp N9   &kp N0
&trans  &kp F11  &kp F12  &kp PLUS  &kp MINUS  &kp SPACE    &kp EQUAL  &kp ASTERISK  &kp COMMA  &kp DOT  &kp SLASH  &trans
                          &trans    &trans     &trans       &trans     &trans        &trans
            >;
        };

        symbols {
            bindings = <
        &kp GRAVE         &kp TILDE          &kp AMPERSAND    &kp EXCLAMATION        &kp PIPE     &none       &none        &none          &none             &none
        &kp SINGLE_QUOTE  &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp CARET    &kp DOLLAR  &kp AT       &kp HASH       &kp UNDERSCORE    &kp DOUBLE_QUOTES
&trans  &none             &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &none        &none       &kp PERCENT  &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH      &trans
                                             &trans           &trans                 &trans       &trans      &trans       &trans
            >;
        };

        navigation {
            bindings = <
        &none  &none           &none         &none      &none    &none       &kp LC(LS(TAB))  &kp LC(TAB)  &none      &none
        &none  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL  &none    &kp LEFT    &kp DOWN         &kp UP       &kp RIGHT  &kp LC(PLUS)
&trans  &none  &none           &none         &none      &none    &last_tabs  &kp LC(D)        &kp LC(U)    &addrbar   &kp LC(MINUS)  &trans
                               &trans        &trans     &mo 4    &trans      &trans           &trans
            >;
        };

        extended_navigation {
            bindings = <
        &trans  &trans  &trans        &trans            &trans    &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP   &kp END        &reader_mode
        &trans  &trans  &kp LEFT_ALT  &kp LEFT_CONTROL  &trans    &kp LA(LEFT)  &kp LA(DOWN)   &kp LA(UP)    &kp LA(RIGHT)  &devtools
&trans  &trans  &trans  &trans        &trans            &trans    &tab_start    &bitwarden     &dark_reader  &translate     &listen       &trans
                        &trans        &trans            &trans    &trans        &trans         &trans
            >;
        };

        utils {
            bindings = <
        &none         &kp K_MUTE       &kp C_VOLUME_DOWN   &kp C_VOLUME_UP  &none     &none  &none      &none         &none  &none
        &kp CAPSLOCK  &kp PRINTSCREEN  &kp DELETE          &kp BACKSPACE    &none     &none  &kp LCTRL  &kp LEFT_ALT  &none  &none
&trans  &none         &none            &kp K_CONTEXT_MENU  &kp INSERT       &none     &none  &none      &none         &none  &none  &trans
                                       &trans              &trans           &trans    &mo 6  &trans     &trans
            >;
        };

        extended_utils {
            bindings = <
        &none  &none  &none           &none              &none     &none   &none      &none         &none  &none
        &none  &none  &kp LC(DELETE)  &kp LC(BACKSPACE)  &none     &none   &kp LCTRL  &kp LEFT_ALT  &none  &none
&trans  &none  &none  &none           &none              &none     &none   &none      &none         &none  &none  &trans
                      &trans          &trans             &trans    &trans  &trans     &trans
            >;
        };

        lowercase_accents {
            bindings = <
        &a_acute       &trans    &e_acute       &trans  &trans    &trans  &u_acute  &i_acute  &o_acute       &trans
        &a_circumflex  &a_grave  &e_circumflex  &trans  &trans    &trans  &trans    &trans    &o_circumflex  &trans
&trans  &a_tilde       &trans    &c_cedilla     &trans  &trans    &trans  &trans    &trans    &o_tilde       &trans  &trans
                                 &trans         &trans  &trans    &trans  &trans    &sl 8
            >;
        };

        uppercase_accents {
            bindings = <
        &sa_acute       &trans     &se_acute       &trans  &trans    &trans  &su_acute  &si_acute  &so_acute       &trans
        &sa_circumflex  &sa_grave  &se_circumflex  &trans  &trans    &trans  &trans     &trans     &so_circumflex  &trans
&trans  &sa_tilde       &trans     &sc_cedilla     &trans  &trans    &trans  &trans     &trans     &so_tilde       &trans  &trans
                                   &trans          &trans  &trans    &trans  &trans     &trans
            >;
        };
    };
};
