//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE        0
#define LMD         1
#define RMD         2
#define SYM         3
#define NUM         4
#define ARW         5
#define Media       6
#define Fun         7
#define Button      8
#define Game        9
#define Gameplus    10

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <28 29>;
            layers = <2 4 1 4 6 7 0 5>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1 2 4 5 6 7>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <2 1 4 4 6 7 0 5>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 24 22>;
            layers = <2 1 4 4 6 7 0 5>;
        };

        combo_accent_layer {
            bindings = <&sl 6>;
            key-positions = <14 15>;
            layers = <0>;
        };
    };

    macros {
        a_acute: a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp A>;
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp E>;
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp I>;
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp O>;
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp U>;
        };

        sa_acute: shift_a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(A)>;
        };

        se_acute: shift_e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(E)>;
        };

        si_acute: shift_i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(I)>;
        };

        so_acute: shift_o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(O)>;
        };

        su_acute: shift_u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(U)>;
        };

        a_circumflex: a_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp A>;
        };

        e_circumflex: e_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp E>;
        };

        o_circumflex: o_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp O>;
        };

        sa_circumflex: shift_a_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(A)>;
        };

        se_circumflex: shift_e_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(E)>;
        };

        so_circumflex: shift_o_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(O)>;
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp A>;
        };

        sa_tilde: shift_a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp LS(A)>;
        };

        a_grave: a_crasis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp GRAVE &kp A>;
        };

        sa_grave: shift_a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp GRAVE &kp LS(A)>;
        };

        c_cedilla: c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp COMMA &kp C>;
        };

        sc_cedilla: shift_c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp COMMA &kp LS(C)>;
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp O>;
        };

        so_tilde: so_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp LS(O)>;
        };

        bitwarden: macro_bitwarden {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(L))>;
        };

        dark_reader: dark_reader {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(A))>;
        };

        translate: translate_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
        };

        listen: listen_selection {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
        };

        devtools: devtools {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F12>;
        };

        addrbar: addrbar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F6>;
        };

        last_tabs: last_tabs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(T))>;
        };

        tab_start: tab_start {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(HOME))>;
        };

        reader_mode: reader_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(R))>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
       &kp Q            &kp W              &kp E                &kp R            &kp T    &kp Y  &kp U             &kp I                 &kp O               &kp P
       &hml LEFT_ALT A  &hml LEFT_SHIFT S  &hml LEFT_CONTROL D  &hml LEFT_GUI F  &kp G    &kp H  &hmr RIGHT_GUI J  &hmr RIGHT_CONTROL K  &hmr RIGHT_SHIFT L  &hmr LEFT_ALT SEMI
&mo 4  &kp Z            &kp X              &kp C                &kp V            &kp B    &kp N  &kp M             &kp COMMA             &kp DOT             &kp SLASH           &mo 5
                                           &mo 3                &kp SPACE        &mo 2    &mo 1  &kp ENTER         &kp LEFT_SHIFT
            >;
        };

        numbers {
            bindings = <
       &kp F1            &kp F2              &kp F3                &kp F4            &kp F5       &kp F6     &kp F7             &kp F8                 &kp F9               &kp F10
       &hml LEFT_ALT N1  &hml LEFT_SHIFT N2  &hml LEFT_CONTROL N3  &hml LEFT_GUI N4  &kp N5       &kp N6     &hmr RIGHT_GUI N7  &hmr RIGHT_CONTROL N8  &hmr RIGHT_SHIFT N9  &hmr LEFT_ALT N0
&none  &kp F11           &kp F12             &kp PLUS              &kp MINUS         &kp EQUAL    &kp ENTER  &kp ASTERISK       &kp COMMA              &kp DOT              &kp SLASH         &none
                                             &key_repeat           &kp SPACE         &kp TAB      &none      &none              &none
            >;
        };

        symbols {
            bindings = <
       &none                       &none                         &none                         &none                           &none        &kp PIPE    &kp EXCLAMATION    &kp AMPERSAND            &kp TILDE                    &kp GRAVE
       &hml LEFT_ALT SINGLE_QUOTE  &hml LEFT_SHIFT LEFT_BRACKET  &hml LEFT_CONTROL LEFT_BRACE  &hml LEFT_GUI LEFT_PARENTHESIS  &kp CARET    &kp DOLLAR  &hmr RIGHT_GUI AT  &hmr RIGHT_CONTROL HASH  &hmr RIGHT_SHIFT UNDERSCORE  &hmr LEFT_ALT DOUBLE_QUOTES
&none  &none                       &kp RIGHT_BRACKET             &kp RIGHT_BRACE               &kp RIGHT_PARENTHESIS           &kp SPACE    &none       &kp PERCENT        &kp LESS_THAN            &kp GREATER_THAN             &kp BACKSLASH                &none
                                                                 &none                         &none                           &none        &kp K_MENU  &kp ENTER          &kp ESCAPE
            >;
        };

        new {
            bindings = <
       &none  &none  &none  &none  &none        &kp HOME       &kp PAGE_DOWN        &kp PAGE_UP            &kp END                 &none
       &none  &none  &none  &none  &none        &kp LEFT       &hmr RIGHT_GUI DOWN  &hmr RIGHT_CONTROL UP  &hmr RIGHT_SHIFT RIGHT  &none
&none  &none  &none  &none  &none  &kp SPACE    &none          &none                &none                  &none                   &none  &none
                     &none  &none  &none        &kp BACKSPACE  &kp ENTER            &kp DELETE
            >;
        };

        navigation {
            bindings = <
       &none  &none  &none  &none  &none    &none              &kp LC(PLUS)     &kp LC(MINUS)   &none     &none
       &none  &none  &none  &none  &none    &none              &kp LC(LS(TAB))  &kp LC(TAB)     &none     &none
&none  &none  &none  &none  &none  &none    &last_tabs         &kp LC(D)        &kp LC(U)       &addrbar  &none  &none
                     &none  &none  &none    &kp LC(BACKSPACE)  &none            &kp LC(DELETE)
            >;
        };

        utils {
            bindings = <
       &none         &kp K_MUTE       &kp C_VOLUME_DOWN   &kp C_VOLUME_UP  &none    &none  &none      &none         &none  &none
       &kp CAPSLOCK  &kp PRINTSCREEN  &none               &none            &none    &none  &kp LCTRL  &kp LEFT_ALT  &none  &none
&none  &none         &none            &kp K_CONTEXT_MENU  &kp INSERT       &none    &none  &none      &none         &none  &none  &none
                                      &none               &none            &none    &none  &none      &none
            >;
        };

        lowercase_accents {
            bindings = <
       &a_acute       &none     &e_acute       &none  &none    &none  &u_acute  &i_acute  &o_acute       &none
       &a_circumflex  &a_grave  &e_circumflex  &none  &none    &none  &none     &none     &o_circumflex  &none
&none  &a_tilde       &none     &c_cedilla     &none  &none    &none  &none     &none     &o_tilde       &none  &none
                                &none          &none  &none    &none  &none     &sl 7
            >;
        };

        uppercase_accents {
            bindings = <
       &sa_acute       &none      &se_acute       &none  &none    &none  &su_acute  &si_acute  &so_acute       &none
       &sa_circumflex  &sa_grave  &se_circumflex  &none  &none    &none  &none      &none      &so_circumflex  &none
&none  &sa_tilde       &none      &sc_cedilla     &none  &none    &none  &none      &none      &so_tilde       &none  &none
                                  &none           &none  &none    &none  &none      &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
