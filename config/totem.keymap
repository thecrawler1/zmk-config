//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE        0
#define LMD         1
#define RMD         2
#define SYM         3
#define NUM         4
#define ARW         5
#define Media       6
#define Fun         7
#define Button      8
#define Game        9
#define Gameplus    10

&sk { quick-release; };

&sl { release-after-ms = <3000>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_lctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <12 13>;
            layers = <0 1 2>;
        };

        combo_rctrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <16 17>;
            layers = <0 1 2>;
        };

        combo_lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <11 12>;
            layers = <0 1 2>;
        };

        combo_ralt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <17 18>;
            layers = <0 1 2>;
        };

        combo_lctrl_lalt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <11 12 13>;
            layers = <0 1 2>;
        };

        combo_rctrl_ralt {
            bindings = <&kp RC(RIGHT_ALT)>;
            key-positions = <16 17 18>;
            layers = <0 1 2>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <27 28>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <6 7>;
            layers = <2 3 1 3 6 7 0 4 5 8>;
        };

        combo_ctrl_backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <28 29>;
            layers = <2 3 1 3 6 7>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <2 1 3 3 6 7 0 4 5>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <2 1 3 3 6 7 0 4 5>;
        };

        combo_game_layer {
            bindings = <&to 8>;
            key-positions = <19 30 31>;
            layers = <0>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 24 22>;
            layers = <2 1 3 3 6 7 0 4 5>;
        };

        combo_accent_layer {
            bindings = <&to 6>;
            key-positions = <14 15>;
            layers = <0>;
        };
    };

    macros {
        a_acute: a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp A>;
            label = "A_ACUTE";
        };

        e_acute: e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp E>;
            label = "E_ACUTE";
        };

        i_acute: i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp I>;
            label = "I_ACUTE";
        };

        o_acute: o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp O>;
            label = "O_ACUTE";
        };

        u_acute: u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp U>;
            label = "U_ACUTE";
        };

        sa_acute: shift_a_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(A)>;
            label = "SHIFT_A_ACUTE";
        };

        se_acute: shift_e_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(E)>;
            label = "SHIFT_E_ACUTE";
        };

        si_acute: shift_i_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(I)>;
            label = "SHIFT_I_ACUTE";
        };

        so_acute: shift_o_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(O)>;
            label = "SHIFT_O_ACUTE";
        };

        su_acute: shift_u_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp SINGLE_QUOTE &kp LS(U)>;
            label = "SHIFT_U_ACUTE";
        };

        a_circumflex: a_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp A>;
            label = "A_CIRCUMFLEX";
        };

        e_circumflex: e_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp E>;
            label = "E_CIRCUMFLEX";
        };

        o_circumflex: o_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp O>;
            label = "O_CIRCUMFLEX";
        };

        sa_circumflex: shift_a_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(A)>;
            label = "SHIFT_A_CIRCUMFLEX";
        };

        se_circumflex: shift_e_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(E)>;
            label = "SHIFT_E_CIRCUMFLEX";
        };

        so_circumflex: shift_o_circumflex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp CARET &kp LS(O)>;
            label = "SHIFT_O_CIRCUMFLEX";
        };

        a_tilde: a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp A>;
            label = "A_TILDE";
        };

        sa_tilde: shift_a_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp LS(A)>;
            label = "SHIFT_A_TILDE";
        };

        a_grave: a_crasis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp GRAVE &kp A>;
            label = "A_CRASIS";
        };

        sa_grave: shift_a_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp GRAVE &kp LS(A)>;
            label = "SHIFT_A_GRAVE";
        };

        c_cedilla: c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp COMMA &kp C>;
            label = "C_CEDILLA";
        };

        sc_cedilla: shift_c_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp COMMA &kp LS(C)>;
            label = "SHIFT_C_CEDILLA";
        };

        o_tilde: o_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp O>;
            label = "O_TILDE";
        };

        so_tilde: so_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CONTEXT_MENU &kp TILDE &kp LS(O)>;
            label = "SO_TILDE";
        };

        bitwarden: macro_bitwarden {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(L))>;
            label = "MACRO_BITWARDEN";
        };

        dark_reader: dark_reader {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(A))>;
            label = "DARK_READER";
        };

        translate: translate_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TRANSLATE_TEXT";
        };

        listen: listen_selection {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "LISTEN_SELECTION";
        };

        devtools: devtools {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F12>;
            label = "DEVTOOLS";
        };

        addrbar: addrbar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F6>;
            label = "ADDRBAR";
        };

        last_tabs: last_tabs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(T))>;
            label = "LAST_TABS";
        };

        tab_start: tab_start {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(HOME))>;
            label = "TAB_START";
        };

        reader_mode: reader_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(R))>;
            label = "READER_MODE";
        };
    };

    behaviors {
        mo_to: mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q  &kp W  &kp E  &kp R      &kp T            &kp Y           &kp U      &kp I      &kp O    &kp P
            &kp A  &kp S  &kp D  &kp F      &kp G            &kp H           &kp J      &kp K      &kp L    &kp SEMI
&mo_to 3 0  &kp Z  &kp X  &kp C  &kp V      &kp B            &kp N           &kp M      &kp COMMA  &kp DOT  &kp SLASH  &mo_to 5 1
                          &sl 1  &kp SPACE  &sk LEFT_META    &sk LEFT_SHIFT  &kp ENTER  &sl 2
            >;
        };

        numbers {
            bindings = <
        &kp F1   &kp F2   &kp F3    &kp F4     &kp F5    &kp F6     &kp F7        &kp F8     &kp F9   &kp F10
        &kp N1   &kp N2   &kp N3    &kp N4     &kp N5    &kp N6     &kp N7        &kp N8     &kp N9   &kp N0
&trans  &kp F11  &kp F12  &kp PLUS  &kp MINUS  &none     &kp EQUAL  &kp ASTERISK  &kp COMMA  &kp DOT  &kp SLASH  &mo_to 5 3
                          &trans    &trans     &trans    &trans     &trans        &trans
            >;
        };

        symbols {
            bindings = <
        &kp GRAVE         &kp TILDE         &kp AMPERSAND   &kp EXCLAMATION       &kp PIPE     &kp HOME    &kp PAGE_DOWN          &kp PAGE_UP      &kp END            &none
        &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp CARET    &kp DOLLAR  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp DOUBLE_QUOTES
&trans  &none             &none             &kp HASH        &kp UNDER             &none        &none       &kp AT                 &kp PERCENT      &none              &kp BACKSLASH      &mo 5
                                            &trans          &trans                &trans       &trans      &trans                 &trans
            >;
        };

        navigation {
            bindings = <
        &none  &none  &none         &none      &none     &kp LC(W)   &kp LC(LS(TAB))  &kp LC(TAB)  &kp LC(T)  &kp LC(R)
        &none  &none  &kp LEFT_ALT  &kp LCTRL  &none     &kp LEFT    &kp DOWN         &kp UP       &kp RIGHT  &kp LC(PLUS)
&trans  &none  &none  &none         &none      &none     &last_tabs  &kp LC(D)        &kp LC(U)    &addrbar   &kp LC(MINUS)  &none
                      &trans        &trans     &trans    &trans      &trans           &sl 4
            >;
        };

        extended_navigation {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &none         &none         &tab_start    &reader_mode   &none
        &trans  &trans  &trans  &trans  &trans    &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)    &kp LA(RIGHT)  &devtools
&trans  &trans  &trans  &trans  &trans  &trans    &none         &translate    &dark_reader  &translate     &listen    &none
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };

        utils {
            bindings = <
        &none         &kp K_MUTE       &kp C_VOLUME_DOWN   &kp C_VOLUME_UP  &kp C_BRIGHTNESS_INC    &none   &none      &none         &none  &none
        &kp CAPSLOCK  &kp PRINTSCREEN  &kp DELETE          &kp BACKSPACE    &kp C_BRIGHTNESS_DEC    &none   &kp LCTRL  &kp LEFT_ALT  &none  &none
&trans  &none         &none            &kp K_CONTEXT_MENU  &kp INSERT       &none                   &none   &none      &none         &none  &none  &none
                                       &trans              &trans           &trans                  &trans  &trans     &trans
            >;
        };

        lowercase_accents {
            bindings = <
        &a_acute       &trans    &e_acute       &trans  &trans    &trans  &u_acute  &i_acute  &o_acute       &trans
        &a_circumflex  &a_grave  &e_circumflex  &trans  &trans    &trans  &trans    &trans    &o_circumflex  &trans
&trans  &a_tilde       &trans    &c_cedilla     &trans  &trans    &trans  &trans    &trans    &o_tilde       &trans  &trans
                                 &trans         &trans  &trans    &to 7   &trans    &trans
            >;
        };

        uppercase_accents {
            bindings = <
        &sa_acute       &trans     &se_acute       &trans  &trans    &trans  &su_acute  &si_acute  &so_acute       &trans
        &sa_circumflex  &sa_grave  &se_circumflex  &trans  &trans    &trans  &trans     &trans     &so_circumflex  &trans
&trans  &sa_tilde       &trans     &sc_cedilla     &trans  &trans    &trans  &trans     &trans     &so_tilde       &trans  &trans
                                   &trans          &trans  &trans    &to 6   &trans     &trans
            >;
        };

        game {
            bindings = <
        &trans  &trans  &trans   &trans  &trans            &trans         &trans  &trans  &trans  &trans
        &trans  &trans  &trans   &trans  &trans            &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans  &trans            &trans         &trans  &trans  &trans  &trans  &trans
                        &kp ESC  &trans  &kp LEFT_SHIFT    &kp LEFT_META  &trans  &trans
            >;
        };
    };
};
